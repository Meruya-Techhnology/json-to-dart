checkJson(json){
      try {
        JSON.parse(json);
      } catch (e) {
        return false;
      }
      return true;
    },
    getKeys(parsedJson){
        let keys = Object.keys(parsedJson);
        return keys;
    },
    executeConvertion(){
      // this.classes = [];
      // var str = JSON.stringify(this.jsonInput);
      let className = TextUtil.capital(this.firstClassName);
      JsonUtil.initClass(this.jsonInput, className)
      this.classes = JsonUtil.retrieveClass()
      // let jsonStatus = this.checkJson(str)
      // if(jsonStatus)this.createClass();
      // console.log(this.classes);
    },
    createClass(){
        let parsedJson = JSON.parse(this.jsonInput)
        let className = TextUtil.capital(this.firstClassName);
        this.classes.push({
          className:TextUtil.capital(className),
          properties:this.createProperty(parsedJson),
          child:parsedJson,
        });
    },
    convertJsonToClass(parsedJson){
        let keys = this.getKeys(parsedJson)
        keys.forEach(key => {
          if(typeof parsedJson[key] == 'object' && !Array.isArray(parsedJson[key]) && parsedJson[key]!= null){
            this.classes.push({
              className:TextUtil.capital(key),
              properties:this.createProperty(parsedJson[key]),
              child:parsedJson[key],
            });
          }
        });
    },
    convertArrayObjectToClass(parentKey, array){
      let parsedJson = array[0];
      this.classes.push({
        className:TextUtil.capital(parentKey),
        properties:this.createProperty(parsedJson),
        child:parsedJson,
      });
    },
    createProperty(json){
      let properties = [];
      if(json!=null){
        let property = {};
        let keys = this.getKeys(json)
        keys.forEach(key=>{
          let propertyKey = TextUtil.propercase(key.toString());
          let propertyValue = this.typeMapper(key, json[key]);
          let isList = typeof json[key] == 'object' && Array.isArray(json[key])
          let isPrimitive = isList ? !(typeof json[key][0] == 'object') : true
          let childType = this.listTypeMapper(key, json[key])
          property = {
            name:propertyKey,
            type:propertyValue,
            originalKey:key,
            isList:isList,
            isPrimitive:isPrimitive,
            childType:childType
          };
          properties.push(property);
          if(typeof json[key] == 'object'){
            if(Array.isArray(json[key]) && typeof json[key][0] == 'object'){
              this.convertArrayObjectToClass(key, json[key]);
            }else{
              this.convertJsonToClass(json);
            }
          }
        });
      }
      return properties;
    },
    typeMapper(key, value){
      switch (typeof value) {
        case 'string':
          return 'String';
        case 'number':
          return 'int';
        case 'boolean':
          return 'bool';
        case 'object':
          if(Array.isArray(value)){
            let firstArray = value[0];
            let childrenType = (value.length > 0) ? this.typeMapper(key, firstArray): 'Null'
            return `List<${childrenType}>`;
          }else if(value == null){
            return 'Null'
          }
          return TextUtil.capital(key);
        default:
          return 'Null';
      }
    },
    listTypeMapper(key, value){
      if(Array.isArray(value)){
        let firstArray = value[0];
        let childType = (value.length > 0) ? this.typeMapper(key, firstArray): 'Null'
        return childType;
      }else{
        return null
      }
    },